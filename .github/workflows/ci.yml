name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Проверка кода и запуск тестов
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16.4
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: goalschool_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check environment variables
        run: node scripts/check-env.js
        env:
          NODE_ENV: test
          PORT: 3001
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/goalschool_test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: goalschool_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          JWT_SECRET: test_secret
          BCRYPT_SALT_ROUNDS: 10

      - name: Initialize database
        run: npm run db:init
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/goalschool_test

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/goalschool_test

      - name: Run linter
        run: npm run lint

  # Сборка и деплой веб-версии
  build-web:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build web version
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: web-build/

  # Сборка Docker образа
  build-docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/goalschool:latest

  # Деплой на сервер
  deploy:
    needs: [build-web, build-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to server
        run: |
          echo "Deploying to production server..."
          # Здесь будет команда для деплоя на сервер
          # Например, через SSH или API провайдера
