// scripts/check-app.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

const { exec } = require('child_process');
const { promisify } = require('util');
const fs = require('fs');
const path = require('path');

const execAsync = promisify(exec);

async function runCommand(command, description) {
  console.log(`\n–í—ã–ø–æ–ª–Ω—è–µ–º: ${description}`);
  console.log(`–ö–æ–º–∞–Ω–¥–∞: ${command}\n`);

  try {
    const { stdout, stderr } = await execAsync(command);
    if (stdout) console.log(stdout);
    if (stderr) console.log(stderr);
    return { success: true, stdout, stderr };
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${error.message}`);
    if (error.stdout) console.log(error.stdout);
    if (error.stderr) console.log(error.stderr);
    return { success: false, error: error.message, stdout: error.stdout, stderr: error.stderr };
  }
}

async function checkEnvironment() {
  console.log('=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js
  const nodeCheck = await runCommand('node --version', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Node.js');
  if (!nodeCheck.success) {
    console.log('‚úó Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º npm
  const npmCheck = await runCommand('npm --version', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ npm');
  if (!npmCheck.success) {
    console.log('‚úó npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    return false;
  }

  console.log('‚úì –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');
  return true;
}

async function checkDependencies() {
  console.log('=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ===\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ node_modules
  if (!fs.existsSync(path.join(__dirname, '..', 'node_modules'))) {
    console.log('‚úó –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ "npm install"');
    return false;
  }

  console.log('‚úì –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n');
  return true;
}

async function checkEnvFile() {
  console.log('=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===\n');

  const envPath = path.join(__dirname, '..', '.env');
  if (!fs.existsSync(envPath)) {
    console.log('‚ö† –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example');
    return false;
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  require('dotenv').config();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  const requiredVars = ['DATABASE_URL', 'DB_HOST', 'DB_PORT', 'DB_NAME', 'DB_USER', 'DB_PASSWORD'];
  let allPresent = true;

  for (const variable of requiredVars) {
    if (!process.env[variable]) {
      console.log(`‚úó ${variable}: –Ω–µ –∑–∞–¥–∞–Ω–∞`);
      allPresent = false;
    }
  }

  if (allPresent) {
    console.log('‚úì –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã\n');
  }

  return allPresent;
}

async function checkDatabaseConnection() {
  console.log('=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===\n');

  const dbCheck = await runCommand(
    'node scripts/check-database.js',
    '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
  );
  return dbCheck.success;
}

async function checkWebBuild() {
  console.log('=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–±–æ—Ä–∫–∏ ===\n');

  const webBuildPath = path.join(__dirname, '..', 'web-build');
  if (!fs.existsSync(webBuildPath)) {
    console.log('‚ö† –í–µ–±-—Å–±–æ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ "npm run build"');
    return false;
  }

  const indexHtmlPath = path.join(webBuildPath, 'index.html');
  if (!fs.existsSync(indexHtmlPath)) {
    console.log('‚úó –§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–µ–±-—Å–±–æ—Ä–∫–µ');
    return false;
  }

  console.log('‚úì –í–µ–±-—Å–±–æ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n');
  return true;
}

async function checkApp() {
  console.log('–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è GoalSchool\n');

  let checksPassed = 0;
  let totalChecks = 5;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (await checkEnvironment()) checksPassed++;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  if (await checkDependencies()) checksPassed++;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (await checkEnvFile()) checksPassed++;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  if (await checkDatabaseConnection()) checksPassed++;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–±–æ—Ä–∫–∏
  if (await checkWebBuild()) checksPassed++;

  console.log('\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ ===');
  console.log(`–ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${checksPassed}/${totalChecks}`);

  if (checksPassed === totalChecks) {
    console.log('üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É:');
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm run app:start');
    console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:3000');
  } else {
    console.log(
      '‚ö† –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É.'
    );
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkApp().catch(error => {
  console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  process.exit(1);
});
