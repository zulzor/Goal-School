const express = require('express');
const path = require('path');
const fs = require('fs');
const chokidar = require('chokidar');
const { createProxyMiddleware } = require('http-proxy-middleware');

console.log('üöÄ –ó–ê–ü–£–°–ö –†–ê–ó–†–ê–ë–û–¢–û–ß–ù–û–ì–û –°–ï–†–í–ï–†–ê –§–£–¢–ë–û–õ–¨–ù–û–ô –®–ö–û–õ–´ "–ê–†–°–ï–ù–ê–õ"');
console.log('='.repeat(60));

const app = express();
const PORT = process.env.PORT || 3003;
const PHP_BACKEND_PORT = process.env.PHP_BACKEND_PORT || 8080;
const PHP_BACKEND_HOST = process.env.PHP_BACKEND_HOST || 'localhost';

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Serve static files from the web-export directory with proper caching
app.use(express.static(path.join(__dirname, '..', 'web-export'), {
  maxAge: '1d',
  setHeaders: (res, path) => {
    if (path.endsWith('.html')) {
      res.setHeader('Cache-Control', 'no-cache');
    }
  }
}));

// Proxy all /api requests to the PHP backend
app.use('/api', createProxyMiddleware({
  target: `http://${PHP_BACKEND_HOST}:${PHP_BACKEND_PORT}`,
  changeOrigin: true,
  pathRewrite: {
    '^/api': '/api' // remove /api prefix when forwarding to PHP backend
  },
  onProxyReq: (proxyReq, req, res) => {
    console.log(`Proxying ${req.method} ${req.originalUrl} to PHP backend`);
  },
  onProxyRes: (proxyRes, req, res) => {
    console.log(`Received response from PHP backend for ${req.method} ${req.originalUrl}: ${proxyRes.statusCode}`);
  },
  onError: (err, req, res) => {
    console.error('Proxy error:', err);
    res.status(500).json({
      error: 'API request failed',
      details: err.message,
    });
  }
}));

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SPA —Ä–æ—É—Ç–∏–Ω–≥ –¥–ª—è React Router
app.get('*', (req, res) => {
  const webExportPath = path.join(__dirname, '..', 'web-export');
  const indexPath = path.join(webExportPath, 'index.html');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ñ–∞–π–ª
  const requestedPath = path.join(webExportPath, req.path);
  
  // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–¥–∞–µ–º –µ–≥–æ
  if (fs.existsSync(requestedPath) && fs.statSync(requestedPath).isFile()) {
    return res.sendFile(requestedPath);
  }
  
  // –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ—Ç–¥–∞–µ–º index.html –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º —Ä–æ—É—Ç–∏–Ω–≥–æ–º
  if (fs.existsSync(indexPath)) {
    res.sendFile(indexPath);
  } else {
    res.status(404).json({
      error: 'Application files not found',
      message: 'Please run the build process to generate the web application files'
    });
  }
});

const server = app.listen(PORT, () => {
  console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
  console.log(`üåê URL: http://localhost:${PORT}`);
  console.log(`üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: http://localhost:${PORT}/api/health`);
  console.log(`üîó PHP Backend: http://${PHP_BACKEND_HOST}:${PHP_BACKEND_PORT}`);
  console.log('='.repeat(60));
  console.log('–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
  console.log('='.repeat(60));
});

// –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ —Ñ–∞–π–ª–∞—Ö –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
const watcher = chokidar.watch(path.join(__dirname, '..', 'web-export'), {
  ignored: /node_modules/,
  persistent: true
});

watcher.on('change', (path) => {
  console.log(`üîÑ –§–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω: ${path}`);
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
  // (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã WebSocket —Å–µ—Ä–≤–µ—Ä)
});

watcher.on('add', (path) => {
  console.log(`‚ûï –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω: ${path}`);
});

watcher.on('unlink', (path) => {
  console.log(`‚ûñ –§–∞–π–ª —É–¥–∞–ª–µ–Ω: ${path}`);
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  watcher.close();
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});

process.on('SIGTERM', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  watcher.close();
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});