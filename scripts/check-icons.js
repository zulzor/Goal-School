// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∫–æ–Ω–æ–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ
import fs from 'fs';
import path from 'path';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
function findFiles(dir, extension) {
  let results = [];
  const files = fs.readdirSync(dir);

  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);

    if (stat.isDirectory()) {
      results = results.concat(findFiles(filePath, extension));
    } else if (path.extname(file) === extension) {
      results.push(filePath);
    }
  });

  return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∫–æ–Ω–æ–∫
function findIconImports(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  const iconImports = [];

  // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∫–æ–Ω–æ–∫
  const importPatterns = [
    /import\s+.*\s+from\s+['"]react-native-vector-icons\/([^'"]+)['"]/g,
    /import\s+.*\s+from\s+['"]@expo\/vector-icons['"]/g,
    /import\s+{\s*([^}]*Icon[^}]*)\s*}\s+from\s+['"]react-native-paper['"]/g,
  ];

  importPatterns.forEach(pattern => {
    let match;
    while ((match = pattern.exec(content)) !== null) {
      iconImports.push({
        line: match[0],
        file: filePath,
        groups: match.slice(1),
      });
    }
  });

  return iconImports;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∫–æ–Ω–æ–∫ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
function findIconUsage(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  const iconUsages = [];

  // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∫–æ–Ω–æ–∫
  const usagePatterns = [
    /<\s*([A-Za-z]+Icon)[^>]*\/?>/g,
    /icon\s*=\s*["'][^"']*["']/g,
    /name\s*=\s*["'][^"']*["']/g,
  ];

  usagePatterns.forEach(pattern => {
    let match;
    while ((match = pattern.exec(content)) !== null) {
      iconUsages.push({
        line: match[0],
        file: filePath,
      });
    }
  });

  return iconUsages;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function checkIcons() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∫–æ–Ω–æ–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ...\n');

  // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö .tsx —Ñ–∞–π–ª–æ–≤
  const tsxFiles = findFiles(path.join(__dirname, '..', 'src'), '.tsx');
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${tsxFiles.length} .tsx —Ñ–∞–π–ª–æ–≤\n`);

  // –ü–æ–∏—Å–∫ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∫–æ–Ω–æ–∫
  let allIconImports = [];
  let allIconUsages = [];

  tsxFiles.forEach(file => {
    const imports = findIconImports(file);
    const usages = findIconUsage(file);

    if (imports.length > 0) {
      allIconImports = allIconImports.concat(imports);
    }

    if (usages.length > 0) {
      allIconUsages = allIconUsages.concat(usages);
    }
  });

  // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('üì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∫–æ–Ω–æ–∫:');
  if (allIconImports.length > 0) {
    allIconImports.forEach(importItem => {
      console.log(`  üìÑ ${path.relative(path.join(__dirname, '..'), importItem.file)}`);
      console.log(`     ${importItem.line}`);
      console.log('');
    });
  } else {
    console.log('  ‚ùå –ò–º–ø–æ—Ä—Ç—ã –∏–∫–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n');
  }

  console.log('üì± –ù–∞–π–¥–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–æ–∫:');
  if (allIconUsages.length > 0) {
    allIconUsages.slice(0, 10).forEach(usage => {
      console.log(`  üìÑ ${path.relative(path.join(__dirname, '..'), usage.file)}`);
      console.log(`     ${usage.line}`);
      console.log('');
    });

    if (allIconUsages.length > 10) {
      console.log(`  ... –∏ –µ—â–µ ${allIconUsages.length - 10} —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n`);
    }
  } else {
    console.log('  ‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π –±–∏–±–ª–∏–æ—Ç–µ–∫
  console.log('üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏–∫–æ–Ω–æ–∫:');
  const packageJson = JSON.parse(
    fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf8')
  );

  const iconLibraries = [
    'react-native-vector-icons',
    '@react-native-vector-icons/material-icons',
    '@expo/vector-icons',
    'react-native-paper',
  ];

  iconLibraries.forEach(lib => {
    if (packageJson.dependencies[lib]) {
      console.log(`  ‚úÖ ${lib}: ${packageJson.dependencies[lib]}`);
    } else if (packageJson.devDependencies[lib]) {
      console.log(`  ‚úÖ ${lib}: ${packageJson.devDependencies[lib]} (dev)`);
    } else {
      console.log(`  ‚ùå ${lib}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
  });

  console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkIcons();
