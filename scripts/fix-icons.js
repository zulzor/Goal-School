// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–º–µ–Ω—ã –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∫–æ–Ω–æ–∫
const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
function findFiles(dir, extension) {
  let results = [];
  const files = fs.readdirSync(dir);

  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);

    if (stat.isDirectory()) {
      // –ò—Å–∫–ª—é—á–∞–µ–º node_modules –∏ .git
      if (file !== 'node_modules' && file !== '.git') {
        results = results.concat(findFiles(filePath, extension));
      }
    } else if (path.extname(file) === extension) {
      results.push(filePath);
    }
  });

  return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∫–æ–Ω–æ–∫
function fixIconImports(filePath) {
  let content = fs.readFileSync(filePath, 'utf8');
  let changesMade = false;

  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã
  const replacements = [
    {
      // –ó–∞–º–µ–Ω–∞ –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ MaterialCommunityIcons
      pattern:
        /import\s+([A-Za-z]+)\s+from\s+['"]react-native-vector-icons\/MaterialCommunityIcons['"]/g,
      replacement: "import { $1 } from '@expo/vector-icons'",
    },
    {
      // –ó–∞–º–µ–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–µ–π
      pattern:
        /import\s+{\s*([^}]*MaterialCommunityIcons[^}]*)\s*}\s+from\s+['"]react-native-vector-icons['"]/g,
      replacement: "import { $1 } from '@expo/vector-icons'",
    },
  ];

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
  replacements.forEach(({ pattern, replacement }) => {
    if (pattern.test(content)) {
      content = content.replace(pattern, replacement);
      changesMade = true;
    }
  });

  // –ï—Å–ª–∏ –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
  if (changesMade) {
    fs.writeFileSync(filePath, content, 'utf8');
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª–µ: ${path.relative(process.cwd(), filePath)}`);
    return true;
  }

  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∫–æ–Ω–æ–∫ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
function checkIconUsage(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –≤ JSX
  const iconUsagePattern =
    /<\s*(MaterialCommunityIcons|Icon)[^>]*name\s*=\s*["']([^"']*)["'][^>]*\/?>/g;
  const matches = [];
  let match;

  while ((match = iconUsagePattern.exec(content)) !== null) {
    matches.push({
      component: match[1],
      iconName: match[2],
      line: content.substring(0, match.index).split('\n').length,
    });
  }

  return matches;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±–µ—Ä—Ç–∫–∏
function createIconWrapper() {
  const iconWrapperPath = path.join(__dirname, '..', 'src', 'components', 'IconWrapper.tsx');

  if (fs.existsSync(iconWrapperPath)) {
    console.log('‚ö†Ô∏è  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç IconWrapper —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    return;
  }

  const iconWrapperContent = `import React from 'react';
import { Platform } from 'react-native';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { IconButton as PaperIconButton } from 'react-native-paper';

interface IconWrapperProps {
  name: string;
  size?: number;
  color?: string;
  onPress?: () => void;
}

export const IconWrapper: React.FC<IconWrapperProps> = ({ 
  name, 
  size = 24, 
  color, 
  onPress 
}) => {
  if (Platform.OS === 'web') {
    return (
      <MaterialCommunityIcons 
        name={name} 
        size={size} 
        color={color} 
        onPress={onPress}
      />
    );
  }
  
  return (
    <PaperIconButton 
      icon={name} 
      size={size} 
      iconColor={color} 
      onPress={onPress}
    />
  );
};
`;

  fs.writeFileSync(iconWrapperPath, iconWrapperContent, 'utf8');
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç IconWrapper');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏–∫–æ–Ω–æ–∫
function createIconConstants() {
  const iconsPath = path.join(__dirname, '..', 'src', 'constants', 'icons.ts');

  if (fs.existsSync(iconsPath)) {
    console.log('‚ö†Ô∏è  –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∫–æ–Ω–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    return;
  }

  const iconsContent = `// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∫–æ–Ω–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export const APP_ICONS = {
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è
  home: 'home',
  homeOutline: 'home-outline',
  news: 'newspaper',
  newsOutline: 'newspaper-outline',
  schedule: 'calendar',
  scheduleOutline: 'calendar-outline',
  nutrition: 'food',
  nutritionOutline: 'food-outline',
  profile: 'account',
  profileOutline: 'account-outline',
  admin: 'shield',
  adminOutline: 'shield-outline',
  coach: 'whistle',
  coachOutline: 'whistle-outline',
  parent: 'account-multiple',
  parentOutline: 'account-multiple-outline',
  
  // –î–µ–π—Å—Ç–≤–∏—è
  edit: 'pencil',
  delete: 'delete',
  add: 'plus',
  close: 'close',
  check: 'check',
  save: 'content-save',
  cancel: 'cancel',
  refresh: 'refresh',
  
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è
  arrowLeft: 'arrow-left',
  arrowRight: 'arrow-right',
  arrowUp: 'arrow-up',
  arrowDown: 'arrow-down',
  
  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
  sort: 'sort',
  sortAscending: 'sort-ascending',
  sortDescending: 'sort-descending',
  filter: 'filter',
  search: 'magnify',
  
  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  trophy: 'trophy',
  star: 'star',
  starOutline: 'star-outline',
  lock: 'lock',
  lockOpen: 'lock-open',
  checkCircle: 'check-circle',
  checkCircleOutline: 'check-circle-outline',
  
  // –°—Ç–∞—Ç—É—Å—ã
  alert: 'alert',
  alertCircle: 'alert-circle',
  alertCircleOutline: 'alert-circle-outline',
  information: 'information',
  informationOutline: 'information-outline',
  help: 'help',
  helpCircle: 'help-circle',
  helpCircleOutline: 'help-circle-outline',
  
  // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ
  share: 'share',
  shareOutline: 'share-outline',
  heart: 'heart',
  heartOutline: 'heart-outline',
  comment: 'comment',
  commentOutline: 'comment-outline',
  
  // –§–∞–π–ª—ã –∏ –º–µ–¥–∏–∞
  image: 'image',
  imageOutline: 'image-outline',
  camera: 'camera',
  cameraOutline: 'camera-outline',
  video: 'video',
  videoOutline: 'video-outline',
  file: 'file',
  fileOutline: 'file-outline',
  download: 'download',
  upload: 'upload',
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  settings: 'cog',
  settingsOutline: 'cog-outline',
  accountSettings: 'account-cog',
  accountSettingsOutline: 'account-cog-outline',
  
  // –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞
  clock: 'clock',
  clockOutline: 'clock-outline',
  calendar: 'calendar',
  calendarOutline: 'calendar-outline',
  
  // –î—Ä—É–≥–∏–µ
  menu: 'menu',
  dotsVertical: 'dots-vertical',
  dotsHorizontal: 'dots-horizontal',
  more: 'dots-horizontal',
} as const;
`;

  fs.writeFileSync(iconsPath, iconsContent, 'utf8');
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∫–æ–Ω–æ–∫');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function fixIcons() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∫–æ–Ω–æ–∫...\n');

  // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  createIconWrapper();
  createIconConstants();

  // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö .tsx —Ñ–∞–π–ª–æ–≤
  const tsxFiles = findFiles(path.join(__dirname, '..', 'src'), '.tsx');
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${tsxFiles.length} .tsx —Ñ–∞–π–ª–æ–≤\n`);

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏–∫–æ–Ω–æ–∫
  let fixedFiles = 0;
  tsxFiles.forEach(file => {
    if (fixIconImports(file)) {
      fixedFiles++;
    }
  });

  console.log(`\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –≤ ${fixedFiles} —Ñ–∞–π–ª–∞—Ö`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–æ–∫
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∫–æ–Ω–æ–∫:');
  let totalUsages = 0;
  tsxFiles.forEach(file => {
    const usages = checkIconUsage(file);
    if (usages.length > 0) {
      console.log(`  üìÑ ${path.relative(process.cwd(), file)}`);
      usages.forEach(usage => {
        console.log(`     –°—Ç—Ä–æ–∫–∞ ${usage.line}: <${usage.component} name="${usage.iconName}" />`);
      });
      totalUsages += usages.length;
    }
  });

  console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ ${totalUsages} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∏–∫–æ–Ω–æ–∫`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ @expo/vector-icons
  const packageJsonPath = path.join(__dirname, '..', 'package.json');
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

  if (!packageJson.dependencies['@expo/vector-icons']) {
    console.log('\n‚ö†Ô∏è  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å @expo/vector-icons:');
    console.log('   npm install @expo/vector-icons');
  } else {
    console.log('\n‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å @expo/vector-icons —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }

  console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∫–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å @expo/vector-icons, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  console.log('   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Metro bundler: npm start -- --reset-cache');
  console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö');
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
fixIcons();
