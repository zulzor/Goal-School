#!/usr/bin/env node

const http = require('http');

console.log('üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ï–†–í–ï–†–ê –§–£–¢–ë–û–õ–¨–ù–û–ô –®–ö–û–õ–´ "–ê–†–°–ï–ù–ê–õ"');
console.log('='.repeat(50));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServer() {
    return new Promise((resolve) => {
        const req = http.get('http://localhost:3003/api/health', (res) => {
            let data = '';
            res.on('data', chunk => {
                data += chunk;
            });
            res.on('end', () => {
                try {
                    const jsonData = JSON.parse(data);
                    resolve({
                        statusCode: res.statusCode,
                        statusMessage: res.statusMessage,
                        data: jsonData,
                        success: res.statusCode === 200
                    });
                } catch (error) {
                    resolve({
                        statusCode: res.statusCode,
                        statusMessage: res.statusMessage,
                        data: data,
                        success: res.statusCode === 200
                    });
                }
            });
        }).on('error', (err) => {
            resolve({
                statusCode: 0,
                statusMessage: err.message,
                data: null,
                success: false
            });
        });
        
        // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
        req.setTimeout(5000, () => {
            req.destroy();
            resolve({
                statusCode: 0,
                statusMessage: 'Timeout',
                data: null,
                success: false
            });
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function monitorContinuously() {
    console.log('\nüîç –ù–ï–ü–†–ï–†–´–í–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì (–Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)\n');
    
    let checkCount = 0;
    let successCount = 0;
    let errorCount = 0;
    
    const interval = setInterval(async () => {
        checkCount++;
        const result = await checkServer();
        
        if (result.success) {
            successCount++;
            console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ ${checkCount}: –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω - ${result.data.status}`);
        } else {
            errorCount++;
            console.log(`‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ ${checkCount}: –û—à–∏–±–∫–∞ - ${result.statusMessage}`);
        }
        
        // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –ø—Ä–æ–≤–µ—Ä–æ–∫
        if (checkCount % 10 === 0) {
            const successRate = ((successCount / checkCount) * 100).toFixed(1);
            console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${checkCount} –ø—Ä–æ–≤–µ—Ä–æ–∫, ${successCount} —É—Å–ø–µ—à–Ω—ã—Ö, ${errorCount} –æ—à–∏–±–æ–∫, ${successRate}% —É—Å–ø–µ—Ö–∞\n`);
        }
    }, 3000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    process.on('SIGINT', () => {
        clearInterval(interval);
        const successRate = checkCount > 0 ? ((successCount / checkCount) * 100).toFixed(1) : 0;
        console.log(`\n\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
        console.log(`üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${checkCount}`);
        console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${successCount}`);
        console.log(`   –û—à–∏–±–æ–∫: ${errorCount}`);
        console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate}%`);
        process.exit(0);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
async function singleCheck() {
    console.log('\nüîç –û–î–ù–û–ö–†–ê–¢–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ï–†–ê...\n');
    
    const result = await checkServer();
    
    if (result.success) {
        console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω!`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${result.data.status}`);
        console.log(`   –í—Ä–µ–º—è: ${result.data.timestamp}`);
        console.log(`   –í–µ—Ä—Å–∏—è: ${result.data.version || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
    } else {
        console.log(`‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!`);
        console.log(`   –û—à–∏–±–∫–∞: ${result.statusMessage}`);
        console.log(`   –ö–æ–¥: ${result.statusCode}`);
    }
    
    return result.success;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2);
    
    if (args.includes('--continuous') || args.includes('-c')) {
        // –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await monitorContinuously();
    } else {
        // –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        const success = await singleCheck();
        process.exit(success ? 0 : 1);
    }
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);